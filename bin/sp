#!/bin/bash

PATH_AND_FILES=`ruby -e '
  def possible_source_locations
    locations_in_env = ENV.fetch("SP_SOURCE_LOCATIONS").split(" ")

    raise "No SP_SOURCE_LOCATIONS set!" if locations_in_env.empty?

    ["."] + locations_in_env
  end

  def log(*message)
    STDERR.puts *message
  end

  def find_real_spec_path(spec_path)
    real_base_path = possible_source_locations.find do |base_path|
      full_path = File.join(base_path, spec_path).split(":")[0]
      File.exist?(full_path)
    end

    if real_base_path
      File.join(real_base_path, spec_path)
    else
      spec_path
    end
  end


  def result(base_path, filenames)
    puts "#{base_path}|#{filenames.join(" ")}"
  end

  # split the list of input files into lists

  # example: %r|^( prefix)?(sites/mbiel)/spec/|
  regex   =  %r|^(?:(.*)/)?([^/]+/[^/]+)/spec/|

  def strip_path_regex
    %r|(?:^[ab]/)?(.*?)(?:[:]in)?$|
  end

  def test_strip_path_regex
    paths = {
              "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb" => "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb",
              "b/sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb" => "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb",
              "b/sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb:32" => "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb:32",
              "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb:32:in" => "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb:32",
              "b/sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb:32:in" => "sites/mobiel_nl/spec/features/desktop_shop/visitor_visits_smartphone_page_spec.rb:32"
            }

    any_errors = false
    paths.each do |input, expected|
      result = input.gsub(strip_path_regex, "\\1")

      success = result == expected
      unless success
        puts "#{input} => #{result}"

        puts regex.match(input)

        any_errors = true
      end
    end

    puts "NO ERRORS!" unless any_errors
  end

  begin
    Array(ARGV).map do |spec_path|
      # Strip 'a/' and 'b/' that git diff adds for some reason, as well as
      # the trailing :in that is added by rspec
      spec_path.match(strip_path_regex)[1]
    end.map do |spec_path|
      find_real_spec_path(spec_path)
    end.group_by do |path|
      matches = path.match(regex)

      raise "Not found" unless matches

      matches[1,2]
    end.each do |path, files|
      base_path = *path.compact
      absolute_filenames = files.map do |file| File.expand_path(file) end

      result(File.join(*base_path), absolute_filenames)
    end
  rescue StandardError => e
    log "Error in Ruby"
    log e
    e.backtrace.each do |l| log l ; end
    puts "NOT FOUND"
  end
' $@`

# Currently only works for the first group of files.
path=$(echo  $PATH_AND_FILES | cut -f1 -d\|)
files=$(echo $PATH_AND_FILES | cut -f2 -d\|)

if [ "$PATH_AND_FILES" == "NOT FOUND" ]; then
  echo "ERROR: no file found!"
  exit 1
else
  command="pushd $path >/dev/null ; bundle exec rspec --color $files ; popd >/dev/null"
  echo $command

  pushd $path >/dev/null ; bundle exec rspec --color $files ; popd >/dev/null
  status=$?
  popd >/dev/null
  exit $status
fi
