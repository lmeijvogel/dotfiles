#!/usr/bin/env ruby

require 'shellwords'
require 'dotenv'
require 'optparse'

Dotenv.load

trap("INT") do
  exit 0
end

def main
  options = check_parameters!
  forbid_master_branch!
  message = format_message(options, formatter: JiraIssueFormatter.new(ENV.fetch('JIRA_ISSUE_PREFIX')))
  ask_confirmation!(message: message)

  puts execute_command("git push #{'--no-verify' if options[:no_verify]} --set-upstream --force-with-lease origin #{head}")
  puts execute_command("hub pull-request -m #{Shellwords.shellescape(message)} -b #{base_branch} -h #{head}")
rescue StandardError => e
  puts "ERROR: #{e.message}"
end

def forbid_master_branch!
  if head == "master"
    puts "On master branch!"
    exit 4
  end
end

def check_parameters!
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename(__FILE__)} [options] (--|commit SHA|message)"

    opts.on('--no-verify', "Skip pre-push verifications") do
      options[:no_verify] = true
    end

    opts.on('--', "Use last commit message as PR message") do
      options[:use_last_commit] = true
    end

    opts.on_tail("-h", "Show this help message") do
      puts opts
      exit 1
    end
  end


  parser.parse!(ARGV)

  if !options[:use_last_commit] && ARGV.empty?
    puts "No PR message given!"
    exit 2
  end

  options
end

def show_usage
  puts <<-EXPLANATION
Usage: #{File.basename(__FILE__)} <description> [base branch] [head]

description: The description for the PR (if --, then the last commit message is used,
             if it is a git ref, the message for that ref is used)
base branch: In which upstream git branch the branch should be merged
head:        What current branch should be merged into 'base branch'

  EXPLANATION
end

def ask_confirmation!(message:)
  puts <<-CONFIRMATION.lines.map(&:strip).join("\n")
    Message: '#{message}'
    Base:    #{base_branch}
    Head:    #{head}

    OK? [Y]
  CONFIRMATION

  exit 1 if $stdin.gets.strip =~ /[Nn]/
end

def format_message(options, formatter:)
  # Try to get the PR description from a git commit, if the
  # relevant commandline option is a git ref.
  # Otherwise, use the content of the commandline option
  @message ||= -> {
    if options[:use_last_commit]
      commit_ref_candidate = "HEAD"
    else
      commit_ref_candidate = ARGV[0]
    end

    commit_description = commit_description_for(commit_ref_candidate)

    message = if commit_description && !commit_description.strip.empty?
      commit_description
    else
      ARGV[0]
    end

    formatter.call(message)
  }.call
end

def commit_description_for(ref)
  `git log -n 1 --pretty="format:%s" #{ref} 2>/dev/null`
end

def base_branch
  ARGV[1] || "master"
end

def head
  @current_branch ||= `git symbolic-ref HEAD`.gsub(%r[refs/heads/], "").strip

  ARGV[2] || @current_branch
end

def execute_command(command)
  puts "$ #{command}"
  result = `#{command}`

  raise "Command failed" unless $?.success?

  result
end

class JiraIssueFormatter
  attr_reader :prefix

  def initialize(prefix)
    @prefix = prefix
  end

  def call(message)
    if ticket_number.zero?
      message
    else
      format("[%s-%03d] %s", prefix, ticket_number, message)
    end
  end

  private

  def ticket_number
    @ticket_number ||= -> {
      $stdout.write "Ticket number? "

      $stdin.gets.strip.to_i
    }.call
  end
end

class BasicMessageFormatter
  def call(message)
    message
  end
end

main
