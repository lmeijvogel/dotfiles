#!/usr/bin/env ruby

require 'shellwords'

trap("INT") do
  exit 0
end

def main
  check_parameters!
  ask_confirmation!

  puts execute_command("git push -f origin #{head}")
  puts execute_command("hub pull-request -m #{Shellwords.shellescape(message)} -b #{base_branch} -h #{head}")
end

def check_parameters!
  if ARGV.length == 0 || ARGV[0] == '-h'
    show_usage

    exit 2
  elsif ARGV[0] =~ /^--?[a-zA-Z0-9]/
    puts "Invalid argument(s)"
    show_usage

    exit 3
  end
end

def show_usage
  puts <<-EXPLANATION
Usage: #{File.basename(__FILE__)} <description> [base branch] [head]

description: The description for the PR (if --, then the last commit message is used,
             if it is a git ref, the message for that ref is used)
base branch: In which upstream git branch the branch should be merged
head:        What current branch should be merged into 'base branch'

  EXPLANATION
end

def ask_confirmation!
  puts <<-CONFIRMATION.lines.map(&:strip).join("\n")
    Message: '#{message}'
    Base:    #{base_branch}
    Head:    #{head}

    OK? [Y]
  CONFIRMATION

  exit 1 if $stdin.gets.strip =~ /[Nn]/
end

def message
  # Try to get the PR description from a git commit, if the
  # relevant commandline option is a git ref.
  # Otherwise, use the content of the commandline option
  @message ||= -> {
    commit_ref_candidate = ARGV[0]

    if commit_ref_candidate == "--"
      commit_ref_candidate = "HEAD"
    end

    commit_description = commit_description_for(commit_ref_candidate)

    commit_description || ARGV[0]
  }.call
end

def commit_description_for(ref)
  `git log -n 1 --pretty="format:%s" #{ref}`
end

def base_branch
  ARGV[1] || "master"
end

def head
  @current_branch ||= `git symbolic-ref HEAD`.gsub(%r[refs/heads/], "").strip

  ARGV[2] || @current_branch
end

def execute_command(command)
  puts "$ #{command}"
  `#{command}`
end

main
